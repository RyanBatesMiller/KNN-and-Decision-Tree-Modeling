# -*- coding: utf-8 -*-
"""Ryan_Miller_CS146_Winter2024_PS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xdnGn6XxQJ9tEOx3a8oUsk1XrZj9wO4j
"""

import sys

"""# New Section"""

# To add your own Drive Run this cell.
from google.colab import drive
drive.mount('/content/drive')

# Please append your own directory after â€˜/content/drive/My Drive/'
# where you have nutil.py and adult_subsample.csv
### ========== TODO : START ========== ###
#sys.path += ['/content/drive/My Drive/cm146-2024-homeworks/PS1'] # example path
sys.path += ['/content/drive/My Drive/CS 146/ps1'] # your path

### ========== TODO : END ========== ###

from nutil import *

# Use only the provided packages!
import math
import csv

from collections import Counter

from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_val_score, cross_validate, train_test_split
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import StratifiedShuffleSplit
import numpy as np
np.warnings.filterwarnings('ignore', category=np.VisibleDeprecationWarning)

######################################################################
# Immutable classes
######################################################################

class Classifier(object) :
    """
    Classifier interface.
    """

    def fit(self, X, y):
        raise NotImplementedError()

    def predict(self, X):
        raise NotImplementedError()


class MajorityVoteClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that always predicts the majority class.

        Attributes
        --------------------
            prediction_ -- majority class
        """
        self.prediction_ = None

    def fit(self, X, y) :
        """
        Build a majority vote classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """
        majority_val = Counter(y).most_common(1)[0][0]
        self.prediction_ = majority_val
        return self

    def predict(self, X) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.prediction_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")

        n,d = X.shape
        y = [self.prediction_] * n
        return y

######################################################################
# Mutable classes
######################################################################

class RandomClassifier(Classifier) :

    def __init__(self) :
        """
        A classifier that predicts according to the distribution of the classes.

        Attributes
        --------------------
            probabilities_ -- class distribution dict (key = class, val = probability of class)
        """
        self.probabilities_ = None

    def fit(self, X, y) :
        """
        Build a random classifier from the training set (X, y).

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            y    -- numpy array of shape (n,), target classes

        Returns
        --------------------
            self -- an instance of self
        """

        ### ========== TODO : START ========== ###
        # part b: set self.probabilities_ according to the training set
        num_hit = Counter(y)[1.0]
        num_tot = num_hit + Counter(y)[0.0]
        self.probabilities_ = num_hit/num_tot

        ### ========== TODO : END ========== ###

        return self

    def predict(self, X, seed=1234) :
        """
        Predict class values.

        Parameters
        --------------------
            X    -- numpy array of shape (n,d), samples
            seed -- integer, random seed

        Returns
        --------------------
            y    -- numpy array of shape (n,), predicted classes
        """
        if self.probabilities_ is None :
            raise Exception("Classifier not initialized. Perform a fit first.")
        np.random.seed(seed)

        ### ========== TODO : START ========== ###
        # part b: predict the class for each test example
        # hint: use np.random.choice (be careful of the parameters)
        n, d = X.shape
        y = np.random.choice([1.0, 0.0], n, p=[self.probabilities_, 1-self.probabilities_])

        ### ========== TODO : END ========== ###

        return y

######################################################################
# Immutable functions
######################################################################

def plot_histograms(X, y, Xnames, yname) :
    n,d = X.shape  # n = number of examples, d =  number of features
    fig = plt.figure(figsize=(20,15))
    ncol = 3
    nrow = d // ncol + 1
    for i in range(d) :
        fig.add_subplot (nrow,ncol,i+1)
        data, bins, align, labels = plot_histogram(X[:,i], y, Xname=Xnames[i], yname=yname, show = False)
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xnames[i])
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')

    plt.savefig ('histograms.pdf')


def plot_histogram(X, y, Xname, yname, show = True) :
    """
    Plots histogram of values in X grouped by y.

    Parameters
    --------------------
        X     -- numpy array of shape (n,d), feature values
        y     -- numpy array of shape (n,), target classes
        Xname -- string, name of feature
        yname -- string, name of target
    """

    # set up data for plotting
    targets = sorted(set(y))
    data = []; labels = []
    for target in targets :
        features = [X[i] for i in range(len(y)) if y[i] == target]
        data.append(features)
        labels.append('%s = %s' % (yname, target))

    # set up histogram bins
    features = set(X)
    nfeatures = len(features)
    test_range = list(range(int(math.floor(min(features))), int(math.ceil(max(features)))+1))
    if nfeatures < 10 and sorted(features) == test_range:
        bins = test_range + [test_range[-1] + 1] # add last bin
        align = 'left'
    else :
        bins = 10
        align = 'mid'

    # plot
    if show == True:
        plt.figure()
        n, bins, patches = plt.hist(data, bins=bins, align=align, alpha=0.5, label=labels)
        plt.xlabel(Xname)
        plt.ylabel('Frequency')
        plt.legend() #plt.legend(loc='upper left')
        plt.show()

    return data, bins, align, labels

######################################################################
# Mutable functions
######################################################################

def error(clf, X, y, ntrials=100, test_size=0.2) :
    """
    Computes the classifier error over a random split of the data,
    averaged over ntrials runs.

    Parameters
    --------------------
        clf         -- classifier
        X           -- numpy array of shape (n,d), features values
        y           -- numpy array of shape (n,), target classes
        ntrials     -- integer, number of trials

    Returns
    --------------------
        train_error -- float, training error
        test_error  -- float, test error
        f1_score    -- float, test "micro" averaged f1 score
    """

    ### ========== TODO : START ========== ###
    # compute cross-validation error using StratifiedShuffleSplit over ntrials

    # Initialize variables to store cumulative errors
    cumulative_train_error = 0
    cumulative_test_error = 0
    cumulative_f1_score = 0

    # Create StratifiedShuffleSplit for reproducibility
    sss = StratifiedShuffleSplit(n_splits=ntrials, test_size=test_size)

    for train_index, test_index in sss.split(X, y):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]

        # Train the classifier on the training data
        clf.fit(X_train, y_train)

        # Make predictions on training and testing data
        y_train_pred = clf.predict(X_train)
        y_test_pred = clf.predict(X_test)

        # Calculate errors and f1 score for each trial
        train_error = 1 - metrics.accuracy_score(y_train, y_train_pred)
        test_error = 1 - metrics.accuracy_score(y_test, y_test_pred)
        f1 = metrics.f1_score(y_test, y_test_pred, average='micro')

        # Accumulate errors and f1 score
        cumulative_train_error += train_error
        cumulative_test_error += test_error
        cumulative_f1_score += f1

    # Average errors and f1 score over ntrials
    train_error = cumulative_train_error / ntrials
    test_error = cumulative_test_error / ntrials
    f1_score = cumulative_f1_score / ntrials

    ### ========== TODO : END ========== ###

    return train_error, test_error, f1_score

######################################################################
# Immutable functions
######################################################################


def write_predictions(y_pred, filename, yname=None) :
    """Write out predictions to csv file."""
    out = open(filename, 'wb')
    f = csv.writer(out)
    if yname :
        f.writerow([yname])
    f.writerows(list(zip(y_pred)))
    out.close()

######################################################################
# main
######################################################################

def main():



    # load adult_subsample dataset with correct file path
    ### ========== TODO : START ========== ###
    #data_file =  "/content/drive/My Drive/cm146-2024-homeowrks/PS1/adult_subsample.csv" # example path
    data_file =  "/content/drive/My Drive/CS 146/ps1/adult_subsample.csv" # your path
    ### ========== TODO : END ========== ###


    data = load_data(data_file, header=1, predict_col=-1)

    X = data.X; Xnames = data.Xnames
    y = data.y; yname = data.yname
    n,d = X.shape  # n = number of examples, d =  number of features




    #========================================
    # part a: plot histograms of each feature
    print('Plotting...')
    plot_histograms (X, y, Xnames=Xnames, yname=yname)
    plt.show()



    ### ========== TODO : START ========== ###
    # part i: Preprocess X (e.g., normalize)
    # (try this after finishing the sections below)

    #scaler = StandardScaler()
    #X = scaler.fit_transform(X)

    ### ========== TODO : END ========== ###




    #========================================
    # train Majority Vote classifier on data

    print('Classifying using Majority Vote...')
    clf = MajorityVoteClassifier() # create MajorityVote classifier, which includes all model parameters
    clf.fit(X, y)                  # fit training data using the classifier
    y_pred = clf.predict(X)        # take the classifier and run it on the training data
    train_error = 1 - metrics.accuracy_score(y, y_pred, normalize=True)
    print('\t-- training error: %.3f' % train_error)

    ### ========== TODO : START ========== ###
    # part b: evaluate training error of Random classifier

    print('Classifying using Random...')
    clf_rand = RandomClassifier ()
    clf_rand.fit(X, y)
    y_pred_rand = clf_rand.predict(X)
    train_error_rand = 1 - metrics.accuracy_score(y, y_pred_rand, normalize=True)
    print('\t-- training error: %.3f' % train_error_rand)

    ### ========== TODO : END ========== ###




    ### ========== TODO : START ========== ###
    # part c: evaluate training error of Decision Tree classifier

    print('Classifying using Decision Tree...')
    clf_dt = DecisionTreeClassifier(criterion='entropy')
    clf_dt.fit(X, y)
    y_pred_dt = clf_dt.predict(X)
    train_error_dt = 1 - metrics.accuracy_score(y, y_pred_dt, normalize=True)
    print('\t-- training error: %.3f' % train_error_dt)

    ### ========== TODO : END ========== ###




    ### ========== TODO : START ========== ###
    # part d: evaluate training error of k-Nearest Neighbors classifier
    # use k = 3, 5, 7 for n_neighbors

    print('Classifying using k-Nearest Neighbors...')
    for k in [3, 5, 7]:
      clf_knn = KNeighborsClassifier(n_neighbors=k)
      clf_knn.fit(X, y)
      y_pred_knn = clf_knn.predict(X)
      train_error_knn = 1 - metrics.accuracy_score(y, y_pred_knn, normalize=True)
      print('\t-- training error(k =', k, '): %.3f' % train_error_knn)

    # print the error for each k


    ### ========== TODO : END ========== ###




    ### ========== TODO : START ========== ###
    # part e: use cross-validation to compute average training and test error of classifiers
    print('Investigating various classifiers...')

    clf_mvc = MajorityVoteClassifier()
    clf_rand = RandomClassifier()
    clf_dt = DecisionTreeClassifier(criterion='entropy')
    clf_knn = KNeighborsClassifier(n_neighbors=5)


    mvc_train_error, mvc_test_error, mvc_f1_score = error(clf_mvc, X, y, ntrials=100)
    print(f"Majority Vote Classifier:")
    print(f"Avg Training Error: {mvc_train_error}")
    print(f"Avg Test Error: {mvc_test_error}")
    print(f"Avg Test Micro F1 Score: {mvc_f1_score}")
    print()

    rand_train_error, rand_test_error, rand_f1_score = error(clf_rand, X, y, ntrials=100)
    print(f"Random Classifier:")
    print(f"Avg Training Error: {mvc_train_error}")
    print(f"Avg Test Error: {mvc_test_error}")
    print(f"Avg Test Micro F1 Score: {mvc_f1_score}")
    print()

    dt_train_error, dt_test_error, dt_f1_score = error(clf_dt, X, y, ntrials=100)
    print(f"Decision Tree Classifier:")
    print(f"Avg Training Error: {dt_train_error}")
    print(f"Avg Test Error: {dt_test_error}")
    print(f"Avg Test Micro F1 Score: {dt_f1_score}")
    print()

    knn_train_error, knn_test_error, knn_f1_score = error(clf_knn, X, y, ntrials=100)
    print(f"K-Nearest Neighbors Classifier:")
    print(f"Avg Training Error: {knn_train_error}")
    print(f"Avg Test Error: {knn_test_error}")
    print(f"Avg Test Micro F1 Score: {knn_f1_score}")
    print()

    ### ========== TODO : END ========== ###




    ### ========== TODO : START ========== ###
    # part f: use 10-fold cross-validation to find the best value of k for k-Nearest Neighbors classifier
    print('Finding the best k...')

    candidates = list(range(1, 50, 2))
    cv_scores = []

    # Perform 10-fold cross-validation for each value of k
    for k in candidates:
      knn = KNeighborsClassifier(n_neighbors=k)
      scores = cross_val_score(knn, X, y, cv=10)
      cv_scores.append(1 - np.mean(scores))

    # Find the best value of k with the lowest validation error
    best_k = candidates[np.argmin(cv_scores)]

    # Plot the validation error against the number of neighbors
    plt.figure(figsize=(10, 6))
    plt.plot(candidates, cv_scores, marker='o', linestyle='-', color='b')
    plt.title('Validation Error vs. Number of Neighbors')
    plt.xlabel('Number of Neighbors (k)')
    plt.ylabel('Validation Error')
    plt.xticks(candidates)
    plt.grid(True)
    plt.show()

    print(f"Best value of k: {best_k}")



    ### ========== TODO : END ========== ###




    ### ========== TODO : START ========== ###
    # part g: investigate decision tree classifier with various depths
    print('Investigating depths...')
    depth_limits = range(1, 21)

    avg_train_errors = []
    avg_test_errors = []

    # Perform cross-validation for each depth limit
    for depth_limit in depth_limits:
        dt_clf = DecisionTreeClassifier(criterion='entropy', max_depth=depth_limit)
        scores = cross_validate(dt_clf, X, y, cv=10, scoring=['accuracy'], return_train_score=True)

        avg_train_error = 1 - np.mean(scores['train_accuracy'])
        avg_test_error = 1 - np.mean(scores['test_accuracy'])

        avg_train_errors.append(avg_train_error)
        avg_test_errors.append(avg_test_error)

    # Plot the average training and test errors against the depth limit
    plt.figure(figsize=(10, 6))
    plt.plot(depth_limits, avg_train_errors, marker='o', linestyle='-', color='b', label='Average Training Error')
    plt.plot(depth_limits, avg_test_errors, marker='o', linestyle='-', color='r', label='Average Test Error')
    plt.title('Average Training and Test Errors vs. Depth Limit')
    plt.xlabel('Depth Limit')
    plt.ylabel('Error')
    plt.legend()
    plt.grid(True)
    plt.show()

    best_depth_limit = depth_limits[np.argmin(avg_test_errors)]

    print(f"Best depth limit: {best_depth_limit}")


    ### ========== TODO : END ========== ###





    ### ========== TODO : START ========== ###
    # part h: investigate decision tree and k-Nearest Neighbors classifier with various training set sizes
    # hint: use train_test_split (use random_state=0 for consistent results)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=0)

    # Initialize classifiers with the best hyperparameters found earlier
    best_dt_depth = 5
    best_knn_k = best_k

    clf_dt = DecisionTreeClassifier(criterion='entropy', max_depth=best_dt_depth)
    clf_knn = KNeighborsClassifier(n_neighbors=best_knn_k)

    # Vary the amount of training data from 10% to 100% in increments of 10%
    training_sizes = np.arange(0.1, 1.1, 0.1)

    dt_train_errors = []
    dt_test_errors = []
    knn_train_errors = []
    knn_test_errors = []

    for training_size in training_sizes:
        # Determine the current training set size
        current_size = int(training_size * len(X_train))
        if training_size < 1:
            # Select a subset of the training data based on the current size
            X_train_subset, _, y_train_subset, _ = train_test_split(X_train, y_train, train_size=training_size, random_state=0)
        else:
            X_train_subset = X_train
            y_train_subset = y_train
        # Train the decision tree classifier
        clf_dt.fit(X_train_subset, y_train_subset)

        # Make predictions on both training and test sets for the decision tree
        y_train_pred_dt = clf_dt.predict(X_train_subset)
        y_test_pred_dt = clf_dt.predict(X_test)

        # Calculate errors for the decision tree
        dt_train_errors.append(1 - metrics.accuracy_score(y_train_subset, y_train_pred_dt))
        dt_test_errors.append(1 - metrics.accuracy_score(y_test, y_test_pred_dt))

        # Train the k-nearest neighbors classifier
        clf_knn.fit(X_train_subset, y_train_subset)

        # Make predictions on both training and test sets for k-nearest neighbors
        y_train_pred_knn = clf_knn.predict(X_train_subset)
        y_test_pred_knn = clf_knn.predict(X_test)

        # Calculate errors for k-nearest neighbors
        knn_train_errors.append(1 - metrics.accuracy_score(y_train_subset, y_train_pred_knn))
        knn_test_errors.append(1 - metrics.accuracy_score(y_test, y_test_pred_knn))

    # Plot the learning curves
    plt.figure(figsize=(12, 8))

    plt.subplot(2, 1, 1)
    plt.plot(training_sizes, dt_train_errors, marker='o', linestyle='-', color='b', label='Decision Tree - Training Error')
    plt.plot(training_sizes, dt_test_errors, marker='o', linestyle='-', color='r', label='Decision Tree - Test Error')
    plt.title('Decision Tree Learning Curve')
    plt.xlabel('Training Set Size')
    plt.ylabel('Error')
    plt.legend()
    plt.grid(True)

    plt.subplot(2, 1, 2)
    plt.plot(training_sizes, knn_train_errors, marker='o', linestyle='-', color='b', label='KNN - Training Error')
    plt.plot(training_sizes, knn_test_errors, marker='o', linestyle='-', color='r', label='KNN - Test Error')
    plt.title('K-Nearest Neighbors Learning Curve')
    plt.xlabel('Training Set Size')
    plt.ylabel('Error')
    plt.legend()
    plt.grid(True)

    plt.tight_layout()
    plt.show()

    ### ========== TODO : END ========== ###



    print('Done')


if __name__ == "__main__":
    main()